variables:
  # Requires the following pipeline secrets:
#if (!kubernetesImageRegistry)
  # IMAGE_REGISTRY_TOKEN
#endif
#if (directTemplateProcessing || kubernetesImageRegistry)
  # KUBERNETES_API_TOKEN_PRODUCTION
  # KUBERNETES_API_TOKEN_STAGE
  # KUBERNETES_API_TOKEN_TEST
#endif
#if (!directTemplateProcessing)
  # KUBERNETES_RESOURCES_REPOSITORY_TOKEN
#endif

  _GIT_HASH: ${BUILD_SOURCEVERSION:0:8} # Only works on a Linux build-agent, not on a Windows build-agent.
#if (kubernetesImageRegistry)
  _IMAGE_PATH_FORMAT: "/example-namespace{0}/aspnet-razor:{1}$(_GIT_HASH)"
#else
  _IMAGE_PATH_FORMAT: "/example-organization/aspnet-razor:{0}$(_GIT_HASH)"
#endif

#if (!directTemplateProcessing)
  KUBERNETES_RESOURCES_REPOSITORY_BASE_DIRECTORY: "$(Pipeline.Workspace)/Kubernetes"
  KUBERNETES_RESOURCES_REPOSITORY_URI_FORMAT: "https://{0}@example.org/Organization/Kubernetes-Resources.git" # The "{0}" placeholder is for the token.
#endif
  KUBERNETES_TEMPLATE_FILE: "$(Build.SourcesDirectory)/.kubernetes/Template.yml" # Path to the Kubernetes template file.

  # Production
  HOST_PRODUCTION: "aspnet-razor.example.org"
#if (kubernetesImageRegistry)
  IMAGE_PATH_PRODUCTION: "$[format(variables['_IMAGE_PATH_FORMAT'], '-production', '')]"
  IMAGE_PULL_REGISTRY_PRODUCTION: "image-registry.openshift-image-registry.svc:5000"
  IMAGE_PUSH_REGISTRY_PRODUCTION: "default-route-openshift-image-registry.apps.prod.example.org"
  IMAGE_PULL_PRODUCTION: "$(IMAGE_PULL_REGISTRY_PRODUCTION)$(IMAGE_PATH_PRODUCTION)"
  IMAGE_PUSH_PRODUCTION: "$(IMAGE_PUSH_REGISTRY_PRODUCTION)$(IMAGE_PATH_PRODUCTION)"
#else
  IMAGE_PATH_PRODUCTION: "$[format(variables['_IMAGE_PATH_FORMAT'], '')]"
  IMAGE_REGISTRY_PRODUCTION: "docker.io"
  IMAGE_PRODUCTION: "$(IMAGE_REGISTRY_PRODUCTION)$(IMAGE_PATH_PRODUCTION)"
#endif
#if (directTemplateProcessing)
  KUBERNETES_API_URL_PRODUCTION: "kubernetes-api.prod.example.org"
#endif
  REPLICAS_PRODUCTION: 2 # REPLICAS - the number of nodes for the load-balancing

  # Stage
  HOST_STAGE: "aspnet-razor-stage.example.org"
#if (kubernetesImageRegistry)
  IMAGE_PATH_STAGE: "$[format(variables['_IMAGE_PATH_FORMAT'], '-stage', 'stage-')]"
  IMAGE_PULL_REGISTRY_STAGE: "$(IMAGE_PULL_REGISTRY_PRODUCTION)"
  IMAGE_PUSH_REGISTRY_STAGE: "default-route-openshift-image-registry.apps.dev.example.org"
  IMAGE_PULL_STAGE: "$(IMAGE_PULL_REGISTRY_STAGE)$(IMAGE_PATH_STAGE)"
  IMAGE_PUSH_STAGE: "$(IMAGE_PUSH_REGISTRY_STAGE)$(IMAGE_PATH_STAGE)"
#else
  IMAGE_PATH_STAGE: "$[format(variables['_IMAGE_PATH_FORMAT'], 'stage-')]"
  IMAGE_REGISTRY_STAGE: "$(IMAGE_REGISTRY_PRODUCTION)"
  IMAGE_STAGE: "$(IMAGE_REGISTRY_STAGE)$(IMAGE_PATH_STAGE)"
#endif
#if (directTemplateProcessing)
  KUBERNETES_API_URL_STAGE: "kubernetes-api.dev.example.org"
#endif
  REPLICAS_STAGE: 2

  # Test
  HOST_TEST: "aspnet-razor-test.example.org"
#if (kubernetesImageRegistry)
  IMAGE_PATH_TEST: "$[format(variables['_IMAGE_PATH_FORMAT'], '-test', 'test-')]"
  IMAGE_PULL_REGISTRY_TEST: "$(IMAGE_PULL_REGISTRY_STAGE)"
  IMAGE_PUSH_REGISTRY_TEST: "$(IMAGE_PUSH_REGISTRY_STAGE)"
  IMAGE_PULL_TEST: "$(IMAGE_PULL_REGISTRY_TEST)$(IMAGE_PATH_TEST)"
  IMAGE_PUSH_TEST: "$(IMAGE_PUSH_REGISTRY_TEST)$(IMAGE_PATH_TEST)"
#else
  IMAGE_PATH_TEST: "$[format(variables['_IMAGE_PATH_FORMAT'], 'test-')]"
  IMAGE_REGISTRY_TEST: "$(IMAGE_REGISTRY_STAGE)"
  IMAGE_TEST: "$(IMAGE_REGISTRY_TEST)$(IMAGE_PATH_TEST)"
#endif
#if (directTemplateProcessing)
  KUBERNETES_API_URL_TEST: "$(KUBERNETES_API_URL_STAGE)"
#endif
  REPLICAS_TEST: 1

  TRANSFORM_BASE_DIRECTORY: "$(Pipeline.Workspace)/Transform"